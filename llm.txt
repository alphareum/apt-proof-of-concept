# APT Fitness Assistant - LLM Context

## Project Overview
APT Fitness Assistant is a comprehensive AI-powered fitness application that combines computer vision, machine learning, and personalized fitness coaching into a modern web application. The project demonstrates Advanced Pose Tracking (APT) technologies through practical fitness applications.

## Key Features
- **Body Composition Analysis**: Advanced computer vision using MediaPipe for pose detection and body analysis
- **AI Exercise Recommendations**: Personalized workout suggestions based on user profiles and goals  
- **Progress Tracking**: Comprehensive analytics with workout history and measurement tracking
- **Goal Management**: Smart goal setting and progress monitoring
- **Multi-Modal Analysis**: Image analysis combined with physical measurements for enhanced accuracy

## Technology Stack
- **Frontend**: Streamlit web application with interactive UI components
- **Computer Vision**: OpenCV, MediaPipe for pose detection and image analysis
- **Machine Learning**: scikit-learn for recommendation systems and body composition estimation
- **Database**: SQLite with extensible architecture supporting PostgreSQL
- **Package Management**: UV package manager with fallback to traditional pip/venv
- **Data Visualization**: Plotly, Matplotlib for analytics and progress charts

## Project Structure
```
apt-proof-of-concept/
├── main.py                     # Main Streamlit application (consolidated & enhanced)
├── src/apt_fitness/            # Modular Python package
│   ├── analyzers/             # Body composition analysis
│   ├── engines/               # Recommendation systems
│   ├── data/                  # Database management
│   ├── ui/                    # UI components
│   ├── core/                  # Models and configuration
│   └── utils/                 # Utility functions
├── docs/                      # Comprehensive documentation
├── processed_images/          # Generated analysis images
└── data/                      # Database and user data
```

## Core Components

### 1. Body Composition Analyzer (`src/apt_fitness/analyzers/body_composition.py`)
- **Scientific Methods**: Navy Method, Jackson-Pollock, Gallagher formulas for body fat calculation
- **Computer Vision**: MediaPipe pose detection with multiple model support (lite, heavy, full)
- **Image Enhancement**: Advanced preprocessing pipeline with quality assessment
- **ML Ensemble**: Random Forest, Gradient Boosting, Ridge Regression for improved accuracy
- **Multi-View Support**: Combines front, side, back view images for better measurements
- **Accuracy**: 60-80% improvement over basic methods (±3-5% vs DEXA scans)

### 2. Recommendation Engine (`src/apt_fitness/engines/recommendation.py`)
- **Exercise Database**: Comprehensive library with cardio, strength, flexibility exercises
- **Personalization**: Based on user goals, fitness level, available equipment, injuries
- **Weekly Planning**: Automated weekly workout plan generation with goal-based focus
- **Equipment Filtering**: Adapts recommendations based on available equipment
- **Constraint Handling**: Respects user injuries and limitations

### 3. Database System (`src/apt_fitness/data/database.py`)
- **SQLite Backend**: Lightweight database with PostgreSQL migration support
- **Comprehensive Models**: Users, workouts, measurements, goals, body analysis
- **Analytics**: Workout streaks, progress tracking, summary statistics
- **Data Persistence**: Reliable storage with transaction safety

### 4. UI Components (`src/apt_fitness/ui/components.py`)
- **Modular Design**: Reusable Streamlit components
- **Enhanced Forms**: Advanced body analysis with measurement inputs
- **Visualization**: Progress charts, workout summaries, analytics dashboards
- **Responsive Layout**: Adaptable to different screen sizes

## Scientific Accuracy Improvements

### Body Fat Calculation
- **Navy Method**: ±3-4% accuracy vs DEXA scans
- **Multi-Formula Approach**: Dynamic weighting based on population characteristics
- **Enhanced Features**: 13 anthropometric features vs previous 6
- **Validation**: Based on peer-reviewed research and clinical studies

### Muscle Mass Estimation  
- **Lee Formula**: MRI-validated with ±5-8% accuracy
- **Multiple Methods**: James, Janssen, Heyward, Kim formulas
- **Age Adjustments**: Sarcopenia factors for elderly populations
- **Gender-Specific**: Optimized calculations for male/female physiology

### BMR Calculation
- **Katch-McArdle**: Gold standard using lean body mass
- **Mifflin-St Jeor**: Most validated for general population
- **Dynamic Weighting**: Based on muscle mass, age, BMI categories
- **Population Adjustments**: Thyroid factors, metabolic differences

## Installation and Setup

### Quick Start
```bash
# One-command setup and run
python run.py --setup --run

# Or using UV package manager
uv venv .venv
uv pip install -r requirements.txt
python main.py
```

### Development Setup
```bash
# Install with development dependencies
python run.py --setup --dev

# Run tests
python -m pytest tests/
python test_accuracy_improvements.py
```

## Key Dependencies
- **Core**: `streamlit>=1.29.0`, `numpy>=1.26.2`, `pandas>=2.1.4`
- **Computer Vision**: `opencv-python>=4.9.0`, `mediapipe>=0.10.9`, `pillow>=10.1.0`
- **Machine Learning**: `scikit-learn>=1.3.2`, `scipy>=1.10.0`
- **Visualization**: `plotly>=5.17.0`, `matplotlib>=3.8.2`
- **Image Processing**: `albumentations>=1.3.0`, `scikit-image>=0.21.0`

## Configuration
- **Environment**: Configurable via `.env` files or environment variables
- **Database**: SQLite by default, PostgreSQL supported
- **Computer Vision**: Adjustable confidence thresholds and model complexity
- **UI**: Customizable themes and layouts

## Performance Optimizations
- **Lazy Loading**: Models and heavy components loaded on-demand
- **Caching**: Streamlit caching for expensive operations
- **Modular Architecture**: Only load required components
- **Error Handling**: Graceful degradation with fallback modes

## Usage Patterns

### Basic Body Analysis
```python
analyzer = BodyCompositionAnalyzer()
result = analyzer.analyze_image(
    image_path="user_photo.jpg",
    user_id="user123",
    physical_measurements={
        "waist_width_cm": 80,
        "height_cm": 175
    }
)
```

### Exercise Recommendations
```python
engine = RecommendationEngine()
recommendations = engine.generate_workout_recommendations(
    user_profile,
    target_duration=30
)
```

## Data Models
- **UserProfile**: Comprehensive user information with fitness goals
- **Exercise**: Detailed exercise database with instructions and constraints
- **WorkoutSession**: Complete workout tracking with mood and difficulty
- **BodyCompositionAnalysis**: Scientific body analysis results
- **Goal**: User goal tracking with progress monitoring

## API Structure
The application follows a clean architecture pattern:
- **Models**: Data structures and business logic
- **Analyzers**: Specialized analysis engines
- **Engines**: Recommendation and planning systems
- **UI**: Presentation layer components
- **Data**: Persistence and database operations

## Error Handling
- **Graceful Degradation**: Works with missing optional dependencies
- **Fallback Modes**: Alternative methods when primary approaches fail
- **User Feedback**: Clear error messages and recovery suggestions
- **Logging**: Comprehensive error tracking for debugging

## Testing
- **Accuracy Validation**: Scientific method testing against known standards
- **Performance Testing**: Initialization and operation speed validation
- **Integration Testing**: Full application flow testing
- **Unit Testing**: Component-level testing (expandable)

## Documentation
- **README.md**: Comprehensive project overview and setup
- **Performance Docs**: Optimization summaries and benchmarks
- **Improvement Docs**: Scientific accuracy enhancement details
- **API Docs**: Inline documentation throughout codebase

## Extension Points
- **New Exercise Types**: Easily add new exercise categories
- **Additional Analysis Methods**: Plug in new body composition formulas
- **Database Backends**: Support for different database systems
- **UI Themes**: Customizable appearance and layouts
- **Export Formats**: Add new data export capabilities

## Production Considerations
- **Scalability**: Database can migrate to PostgreSQL for larger deployments
- **Security**: User data protection with configurable privacy settings  
- **Performance**: Optimized for responsive user experience
- **Monitoring**: Built-in analytics and usage tracking
- **Updates**: Modular architecture supports incremental improvements

This project represents a comprehensive fitness application that balances scientific accuracy with user experience, making advanced fitness analysis accessible through modern web technologies.