version: '3.8'

services:
  # APT API Service
  apt-api:
    build: .
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql://apt_user:apt_password@postgres:5432/apt_db
      - LLM_PROVIDER=kolosal
      - KOLOSAL_API_URL=http://kolosal:8080
    volumes:
      - ./uploads:/app/uploads
      - ./pose_data:/app/pose_data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - kolosal
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=apt_db
      - POSTGRES_USER=apt_user
      - POSTGRES_PASSWORD=apt_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apt_user -d apt_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kolosal.AI Local LLM (Optional - comment out if using cloud LLMs)
  kolosal:
    image: kolosal/kolosal-ai:latest
    ports:
      - "8080:8080"
    environment:
      - MODEL_NAME=Gemma 3 4B:4-bit
    volumes:
      - kolosal_models:/app/models
    restart: unless-stopped
    # Uncomment if you have GPU support
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Streamlit Frontend (Optional)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://apt-api:5000
    depends_on:
      - apt-api
    restart: unless-stopped

  # Redis for caching (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - apt-api
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  kolosal_models:
  redis_data:

networks:
  default:
    name: apt-network